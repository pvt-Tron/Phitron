Problem 1: Common Friends (Set Operations)
Problem:
 Given two sets of friends from two people, find the mutual friends,
  unique friends of each, and the total number of unique friends.
Example Input:
a_friends = {"Rahim", "Karim", "Sakib", "Jamal"}
b_friends = {"Sakib", "Jamal", "Rafiq", "Nadim"}

Expected Output:
Mutual friends: {'Sakib', 'Jamal'}
Unique to A: {'Rahim', 'Karim'}
Unique to B: {'Rafiq', 'Nadim'}
Total unique friends: 6


Problem 2: Sort Students by Marks (Tuple + Dictionary)
Problem:
 You are given a list of tuples — each containing a student’s name and mark.
 Sort them in descending order of marks and print the top 3 scorers.
Example Input:
students = [
    ("Rafi", 89), ("Sumi", 95), ("Hasan", 90), ("Nila", 75), ("Anik", 98)
    ]

Expected Output:
Top 3 students:
Anik - 98
Sumi - 95
Hasan - 90




Problem 3: Word Length Filter (Lambda + Filter)
Problem:
 Given a list of words, use filter() and lambda to return
  only words whose length is greater than 4.
 Example Input:
words = ["sun", "planet", "moon", "star", "universe"]

Expected Output:
['planet', 'universe']


Problem 4: Square of Even Numbers (Map + Filter + Lambda)
Problem:
 Write a one-line Python expression using map(), filter(),
 and lambda that takes a list of integers and returns the 
 squares of even numbers only.
Example Input:
nums = [1, 2, 3, 4, 5, 6]

Expected Output:
[4, 16, 36]



Problem 5: Write and Read a File
Problem:
 Write a Python program to:
Create a text file named data.txt


Write “Learning Python is fun!” into it.


Read the file and print its content.



 Problem 6: Count Lines in a File
Problem:
 Write a Python program to count how many lines are
  in a text file named story.txt. If the file does 
  not exist, handle the exception and print an error
  message, otherwise read the text file ( test it with
  both conditions ). Print a message finally. 


1. Create a text file named emails.txt containing multiple email addresses,
some in uppercase and some repeated.
Write a Python program to clean the data by converting all emails to lowercase,
removing duplicates, sorting them alphabetically, and saving the cleaned list
to a new file named unique_emails.txt.


2. Create a text file named names.txt containing a list of names.
Some names may have extra spaces, inconsistent capitalization (like “aLiCe”
 or “ bob ”), or appear more than once.
Write a Python program to clean the data by:
1.  Removing extra spaces.
2.  Converting all names so that only the first letter is capitalized.
3.  Removing duplicate names. 
4. Sorting the names alphabetically.
Finally, save the cleaned list into a new file named clean_names.txt.


3. Write a Python program that creates a list of 5 numbers.
Ask the user for an index number and print the value at that index.
If the index is out of range, handle the exception and print "Invalid index!".